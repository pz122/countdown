{"version":3,"sources":["Countdown.js","App.js","serviceWorker.js","index.js"],"names":["Countdown","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","days","hours","mins","secs","_this2","interval","setInterval","date","calculateCountdown","setState","stop","endDate","diff","Date","parse","timeLeft","years","millisecs","Math","floor","clearInterval","value","String","length","countDown","react_default","a","createElement","className","addLeadingZeros","Component","defaultProps","App","currentDate","year","getMonth","getDate","getFullYear","href","src_Countdown","concat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84f0ea26.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types'\nimport './App.css';\n\nclass Countdown extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      days: 0,\n      hours: 0,\n      mins: 0,\n      secs: 0,\n    }\n  }\n\n  componentDidMount() {\n    //update every second\n    this.interval = setInterval(() => {\n      const date= this.calculateCountdown(this.props.date);\n      date ? this.setState(date) : this.stop();\n    },1000);\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  }\n\n  calculateCountdown(endDate) {\n    let diff = (Date.parse(new Date(endDate)) - Date.parse(new Date())) / 1000;\n\n    //clear Countdown when date is reached\n    if (diff <= 0) return false;\n\n    const timeLeft ={\n      years: 0,\n      days: 0,\n      hours: 0,\n      mins: 0,\n      secs: 0,\n      millisecs: 0,\n    };\n\n    // calculate time difference between now and expected date\n    if (diff >= (50 * 86400)) { // 365.25 * 24 * 60 * 60\n      timeLeft.years = Math.floor(diff / (365.25 * 86400));\n      diff -= timeLeft.years * 50 * 86400;\n    }\n    if (diff >= 86400) { // 24 * 60 * 60\n      timeLeft.days = Math.floor(diff / 86400);\n      diff -= timeLeft.days * 86400;\n    }\n    if (diff >= 3600) { // 60 * 60\n      timeLeft.hours = Math.floor(diff / 3600);\n      diff -= timeLeft.hours * 3600;\n    }\n    if (diff >= 60) {\n      timeLeft.mins = Math.floor(diff / 60);\n      diff -= timeLeft.mins * 60;\n    }\n    timeLeft.secs = diff;\n\n    return timeLeft;\n  }\n\n  stop() {\n   clearInterval(this.interval);\n }\n\n addLeadingZeros(value) {\n   value = String(value);\n   while (value.length < 2) {\n     value = '0' + value;\n   }\n   return value;\n }\n\n\n render() {\n    const countDown = this.state;\n\n    return (\n      <div className=\"Clock\">\n        <div className=\"column\">\n          <span className=\"figure\">{this.addLeadingZeros(countDown.days)} </span>\n          <span>{countDown.days === 1 ? 'Day' : 'Days'}</span>\n        </div>\n        <div className=\"column\">\n          <span className=\"figure\">{this.addLeadingZeros(countDown.hours)} </span>\n          <span>Hours</span>\n        </div>\n        <div className=\"column\">\n          <span className=\"figure\">{this.addLeadingZeros(countDown.mins)} </span>\n          <span>Mins</span>\n        </div>\n        <div className=\"column\">\n          <span className=\"figure\">{this.addLeadingZeros(countDown.secs)} </span>\n          <span>Secs</span>\n        </div>\n      </div>\n    );\n  }\n}\n\nCountdown.propTypes = {\n  date: PropTypes.string.isRequired\n}\n\nCountdown.defaultProps = {\n  date: new Date()\n}\n\n\nexport default Countdown;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Countdown from './Countdown.js';\n\nclass App extends Component {\n\n  render() {\n    const currentDate = new Date();\n    const year = (currentDate.getMonth() === 3 && currentDate.getDate() > 22) ? currentDate.getFullYear() + 1 : currentDate.getFullYear();\n    return (\n      <div className=\"App\" >\n        <h2 >New Website Coming Soon!</h2>\n        <p >For any business enquiries please email at\n        <a href=\"mailto:zeniadesign@hotmail.com\"> zeniadesign@hotmail.com</a> </p>\n        <div className=\"Clock\">\n          <Countdown date={`${year}-03-22T00:00:00`} />\n\n        </div>\n      </div>\n    )\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}